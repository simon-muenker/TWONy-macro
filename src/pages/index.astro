---
import "../styles/global.css";

import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>TWONy-macro</title>
  </head>
  <body>
    <div class="absolute top-0 left-0 z-50 w-auto bg-black/30 rounded-br-2xl backdrop-blur-lg">
      <Header />
    </div>
    <main>
      <div id="3d-graph"></div>
      <div class="absolute bottom-0 left-0 z-50 p-4 bg-black/30 rounded-tr-2xl backdrop-blur-lg">
        <canvas id="eval-chart" width="512" height="180"> </canvas>
      </div>
    </main>
    <div class="absolute right-0 bottom-0 z-50 w-auto bg-black/30 rounded-tl-2xl backdrop-blur-lg">
      <Footer />
    </div>
  </body>

  <script>
    import { interpolateRdYlGn } from "d3";

    import { createChart } from "@logic/chart.js";
    import { createGraph, updateGraphData } from "@logic/graph.js";
    import { createGUI } from "@logic/gui.js";

    import { generateNodeData } from "@logic/generator.ts";
    import { CONFIG } from "@logic/config.ts";
    import type { OrbitControls } from "three/examples/jsm/Addons.js";

    const DATA = generateNodeData(CONFIG.network.n_agents);
    const graphEL: HTMLElement = document.getElementById(
      "3d-graph",
    ) as HTMLElement;
    const canvasEL: HTMLCanvasElement = document.getElementById(
      "eval-chart",
    ) as HTMLCanvasElement;

    let evaluation: Array<number> = [
      DATA.reduce((total, next) => total + next.sentiment, 0) / DATA.length,
    ];

    const gui = createGUI();
    const Graph = createGraph(graphEL, DATA);
    const chart = createChart(canvasEL, evaluation);

    const controls = {
      start: function () {
        startSimulation();
      },
      pause: function () {
        pauseSimulation();
      },
      reset: function () {
        resetSimulation();
      },
    };
    gui.add(controls, "start").name("Start");
    gui.add(controls, "pause").name("Pause");
    gui.add(controls, "reset").name("Reset");

    let running: boolean = false;
    let step: number = 0;

    function startSimulation() {
      console.debug("> Starting Simulation.");
      running = true;
      (Graph.controls() as OrbitControls).autoRotate = true;

      let runner = setInterval(() => {
        if (step >= CONFIG.model.n_steps || !running) {
          pauseSimulation();
          clearInterval(runner);
        }

        for (let i = 0; i < DATA.length; i++) {
          DATA[i].sentiment = DATA[i].sentiment + (Math.random() - 0.5) * 0.5;
        }

        Graph.nodeColor((node) =>
          interpolateRdYlGn((node as any).data.sentiment),
        );

        evaluation.push(
          DATA.reduce((total, next) => total + next.sentiment, 0) / DATA.length,
        );
        chart.data.labels = Object.keys(evaluation);
        chart.update();

        step++;
      }, 250);
    }

    function pauseSimulation() {
      console.debug("> Pause Simulation.");
      running = false;
      (Graph.controls() as OrbitControls).autoRotate = false;
    }

    function resetSimulation() {
      console.debug("> Resetting Simulation.");
      pauseSimulation();

      step = 0;

      updateGraphData(Graph, DATA);

      evaluation = [
        DATA.reduce((total, next) => total + next.sentiment, 0) / DATA.length,
      ];
      chart.data.labels = Object.keys(evaluation);
      chart.update();
    }
  </script>
</html>
