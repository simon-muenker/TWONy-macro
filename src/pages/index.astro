---
import "../styles/global.css";

import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>TWONy-macro</title>
  </head>
  <body>
    <div
      class="absolute top-0 left-0 z-50 w-auto rounded-br-2xl bg-black/30 backdrop-blur-lg"
    >
      <Header />
    </div>
    <main>
      <div id="3d-graph"></div>
      <div
        class="absolute bottom-0 left-0 z-50 rounded-tr-2xl bg-black/30 p-4 backdrop-blur-lg"
      >
        <canvas id="eval-chart" width="512" height="180"> </canvas>
      </div>
    </main>
    <div
      class="absolute right-0 bottom-0 z-50 w-auto rounded-tl-2xl bg-black/30 backdrop-blur-lg"
    >
      <Footer />
    </div>
  </body>

  <script>
    import _ from "lodash";
    import { createChart, destroyChart } from "@logic/chart.js";
    import {
      createGraph,
      generateGraphData,
      applyColorScale,
      toggleOrbitControls,
    } from "@logic/graph.js";
    import { createGUI } from "@logic/gui.js";

    import { config } from "@logic/config.ts";
    import { deffuant_weibach_bcm, select_neighbor } from "@logic/model.ts";

    import type { NodeData } from "@logic/generator.ts";

    const graphEL: HTMLElement = document.getElementById(
      "3d-graph",
    ) as HTMLElement;
    const canvasEL: HTMLCanvasElement = document.getElementById(
      "eval-chart",
    ) as HTMLCanvasElement;

    const gui = createGUI();
    const controls = {
      start: function () {
        startSimulation();
      },
      pause: function () {
        pauseSimulation();
      },
      reset: function () {
        window.location.reload();
      },
    };
    gui.add(controls, "start").name("Start");
    gui.add(controls, "pause").name("Pause");
    gui.add(controls, "reset").name("Reset");

    const graph = createGraph(graphEL);
    let running: boolean = false;
    let step: number = 0;
    let data: Array<NodeData> = [];
    let evaluation: Array<number> = [];
    resetSimulation();

    function startSimulation() {
      console.debug("> Starting Simulation.");
      running = true;
      toggleOrbitControls(graph);

      const chart = createChart(canvasEL, evaluation);

      let runner = setInterval(() => {
        if (step >= config.model.n_steps || !running) {
          pauseSimulation();
          clearInterval(runner);
        }

        let graphData = graph.graphData();

        for (let i = 0; i < data.length; i++) {
          let neighbor = graphData.links
            .filter(
              (link) => link.source && (link.source as { id: number }).id === i,
            )
            .map(
              (link) =>
                link.target &&
                (link.target as { data: NodeData }).data.sentiment,
            );

          let selected_neighbor_value = select_neighbor(
            data[i].sentiment,
            neighbor,
            config.model.sorting,
          );

          data[i].sentiment = deffuant_weibach_bcm(
            data[i].sentiment,
            selected_neighbor_value,
          );
        }

        applyColorScale(graph);

        evaluation.push(_.mean(data.map((d) => d.sentiment)));
        chart.data.labels = Object.keys(evaluation);
        chart.update();

        step++;
      }, 50);
    }

    function pauseSimulation() {
      console.debug("> Pause Simulation.");
      running = false;
      toggleOrbitControls(graph, false);
    }

    function resetSimulation() {
      console.debug("> Resetting Simulation.");
      pauseSimulation();

      step = 0;
      data = generateGraphData(graph);
      evaluation = [_.mean(data.map((d) => d.sentiment))];
      destroyChart(canvasEL);
    }
  </script>
</html>
